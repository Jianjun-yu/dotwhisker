% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dw_distplot.R
\name{dw_distplot}
\alias{dw_distplot}
\title{Distribution Plots of Regression Results}
\usage{
dw_distplot(x, order_vars = NULL, show_intercept = FALSE,
  model_name = "model", dist_args = list(alpha = 0.5),
  line_args = list(alpha = 0.05, size = 1), ...)
}
\arguments{
\item{x}{Either a tidy data frame of rescaled regression results (see 'Details'), a model object to be tidied with \code{\link[broom]{tidy}}, or a list of such model objects.}

\item{order_vars}{A vector of variable names that specifies the order in which the variables are to appear along the y-axis of the plot.}

\item{show_intercept}{A logical constant indicating whether the coefficient of the intercept term should be plotted.}

\item{model_name}{The name of a variable that distinguishes separate models within a tidy data frame.}

\item{line_args}{A list of arguments specifying the appearance of the line beneath the normal distribution.  For supported arguments, see \code{\link[ggstance::geom_linerangeh]{geom_linerangeh}}.}

\item{\dots}{Extra arguments to pass to \code{\link[broom]{tidy}}.}

\item{polygon_args}{A list of arguments specifying the appearance of the polygon representing the normally distributed regression estimates.  For supported arguments, see \code{\link[ggplot]{geom_polygon}}.}
}
\value{
The function returns a \code{ggplot} object.
}
\description{
\code{dwplot} is a function for quickly and easily generating normal distribution plots of regression models.
}
\details{
\code{dw_distplot} visualizes regression model objects or regression results saved in tidy data frames by, e.g., \code{\link[broom]{tidy}} as plots of standardized normally distributed regression estimates, rescaled by twice the standard deviation of their respective variables in the analyzed dataset.  A line marking the width of the chosen confidence interval underlies the distribution.

Tidy data frames to be plotted should include the variables \code{term} (names of predictors), \code{estimate} (corresponding estimates of coefficients or other quantities of interest), \code{std.error} (corresponding standard errors), and optionally \code{model} (when multiple models are desired on a single plot; a different name for this last variable may be specified using the model_name argument).
In place of \code{std.error} one may substitute \code{conf.low} (the lower bounds of the confidence intervals of each estimate) and \code{conf.high} (the corresponding upper bounds).  These results should be rescaled using the \code{\link[dotwhisker]{by_2sd}} function before being passed to \code{dw_distplot}.

For convenience, \code{dw_distplot} also accepts as input those model objects that can be tidied by \code{\link[broom]{tidy}}, or a list of such model objects.

Because the function can take a data frame as input, it is easily employed for a wide range of models, including those not supported by \code{\link[broom]{tidy}}.
And because the output is a \code{ggplot} object, it can easily be further customized with any additional arguments and layers supported by \code{ggplot2}.
Together, these two features make \code{dw_distplot} extremely flexible.
}
\examples{
library(broom)
library(dplyr)
# Plot regression coefficients from a single model object
data(mtcars)
m1 <- lm(mpg ~ wt + cyl + disp, data = mtcars)
dw_distplot(m1) +
    xlab("Coefficient") +
    geom_vline(xintercept = 0, colour = "grey50", linetype = 2)
# Plot regression coefficients from multiple models on the fly
m2 <- update(m1, . ~ . - disp)
dw_distplot(list(full = m1, nodisp = m2))
# Change the width and appearance of the line marking the confidence interval
dw_distplot(m1, alpha = .1, line_args = list(size = 2, colour = "yellow"))
# Plot regression coefficients from multiple models in a tidy data frame
by_trans <- mtcars \%>\% group_by(am) \%>\%
    do(tidy(lm(mpg ~ wt + cyl + disp + gear, data = .))) \%>\%
    by_2sd(mtcars) \%>\% rename(model=am) \%>\%
    relabel_predictors(c(wt = "Weight", cyl = "Cylinders", disp = "Displacement", gear = "Gears"))
dw_distplot(by_trans) +
    theme_bw() + xlab("Coefficient") + ylab("") +
    geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
    ggtitle("Predicting Gas Mileage, OLS Estimates") +
    theme(plot.title = element_text(face = "bold"),
          legend.position=c(.01, .05), legend.justification=c(0, 0),
          legend.background = element_rect(colour="grey80"),
          legend.title.align = .5) +
    scale_colour_grey(start = .4, end = .8,
                      name = "Transmission",
                      breaks = c(0, 1),
                      labels = c("Automatic", "Manual")) +
    scale_fill_grey(start = .4, end = .8,
                      name = "Transmission",
                      breaks = c(0, 1),
                      labels = c("Automatic", "Manual"))

}
\references{
Kastellec, Jonathan P. and Leoni, Eduardo L. 2007. "Using Graphs Instead of Tables in Political Science." Perspectives on Politics, 5(4):755-771.
}
